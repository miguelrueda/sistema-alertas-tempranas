package mx.org.banxico.sisal.servlets;

import java.io.IOException;
import java.io.NotSerializableException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import mx.org.banxico.sisal.dao.SoftwareDAO;
import mx.org.banxico.sisal.dao.VulnerabilityDAO;
import mx.org.banxico.sisal.entities.Software;
import mx.org.banxico.sisal.parser.entidades.CVE;
import mx.org.banxico.sisal.parser.entidades.VulnSoftware;

/**
 * Controlador para la lista de foundListerabilidades
 *
 * @author t41507
 * @version 04072014
 */
public class VulnerabilityServlet extends HttpServlet implements java.io.Serializable {

    /**
     * Atributos de serialización y Logger
     */
    private static final long serialVersionUID = -1L;
    private static final Logger LOG = Logger.getLogger(VulnerabilityServlet.class.getName());

    /**
     * Constructor
     */
    public VulnerabilityServlet() {
        super();
    }

    /**
     * Método doGet
     *
     * @param request referencia de Solicitud
     * @param response referencia de Respuesta
     * @throws ServletException
     * @throws IOException
     */
    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        if (!request.getParameter("action").equals("")) {
            String action = (String) request.getParameter("action");
            int page = 1;
            int recordsPerPage = 20;
            String nextJSP = "/admin/Index.html";
            RequestDispatcher view;
            VulnerabilityDAO dao = new VulnerabilityDAO();
            SoftwareDAO swdao = new SoftwareDAO();
            HttpSession sesion = request.getSession();
            try {
                sesion.setAttribute("vulndao", dao);
                sesion.setAttribute("swdao", swdao);
            } catch (ClassCastException e) {
                LOG.log(Level.INFO, "El objeto de tipo Connection no es serializable.");
            }

            if (action.equalsIgnoreCase("view")) {
                String tipo = (String) request.getParameter("tipo");
                int tipoI = Integer.parseInt(tipo);
                switch (tipoI) {
                    case 1:
                        if (request.getParameter("page") != null) {
                            page = Integer.parseInt(request.getParameter("page"));
                        }
                        List<CVE> cveList = dao.retrieveRecents((page - 1) * recordsPerPage, recordsPerPage);
                        int noOfRecords = dao.getNoOfRRecords();
                        //int noOfPages = (int) Math.ceil(noOfRecords * 1.0 / recordsPerPage);
                        int noOfPages = (int) Math.ceil(noOfRecords * 1.0 / recordsPerPage);
                        request.setAttribute("cveList", cveList);
                        request.setAttribute("noOfPages", noOfPages);
                        request.setAttribute("currentPage", page);

                        LOG.log(Level.INFO, "Redireccionando al recurso: /vulnerabilities/recentVulns.jsp");
                        nextJSP = "/admin/vulnerabilities/recentVulns.jsp";
                        break;
                    case 2:
                        if (request.getParameter("page") != null) {
                            page = Integer.parseInt(request.getParameter("page"));
                        }
                        List<CVE> arcveList = dao.retrieveAll((page - 1) * recordsPerPage, recordsPerPage);
                        int arnoOfRecords = dao.getNoOfARecords();
                        int arnoOfPages = (int) Math.ceil(arnoOfRecords * 1.0 / recordsPerPage);
                        request.setAttribute("arcveList", arcveList);
                        request.setAttribute("arnoOfPages", arnoOfPages);
                        request.setAttribute("currentPage", page);
                        LOG.log(Level.INFO, "Redireccionando al recurso: /vulnerabilities/vulnArchive.jsp");
                        nextJSP = "/admin/vulnerabilities/vulnArchive.jsp";
                        break;
                    case 3:
                        if (request.getParameter("page") != null) {
                            page = Integer.parseInt(request.getParameter("page"));
                        }
                        List<Software> swList = swdao.retrieveFromList((page - 1) * recordsPerPage, recordsPerPage);
                        int swnoOfRecords = swdao.getNoOfRecords();
                        int swnoOfPages = (int) Math.ceil(swnoOfRecords * 1.0 / recordsPerPage);
                        request.setAttribute("swList", swList);
                        request.setAttribute("swnoOfPages", swnoOfPages);
                        request.setAttribute("currentPage", page);
                        LOG.log(Level.INFO, "Redireccionando al recurso: /vulnerabilities/supportedSW.jsp");
                        nextJSP = "/admin/vulnerabilities/supportedSW.jsp";
                        break;
                }
                view = getServletContext().getRequestDispatcher(nextJSP);
                view.forward(request, response);
            } else if (action.equalsIgnoreCase("edit")) {

            } else if (action.equalsIgnoreCase("search")) {
                response.setContentType("text/html; charset=UTF-8");
                String type = request.getParameter("type");
                StringBuilder bf = new StringBuilder();
                if (type.equalsIgnoreCase("swsearch")) {
                    String key = request.getParameter("key");
                    List<Software> foundSw = swdao.searchSoftware(key);
                    for (Software sw : foundSw) {
                        bf.append("<tr>");
                        bf.append("<td>").append(sw.getFabricante()).append("</td>");
                        bf.append("<td>").append(sw.getNombre()).append("</td>");
                        bf.append("<td>").append(sw.getVersion()).append("</td>");
                        bf.append("<td>").append(sw.getUAResponsable()).append("</td>");
                        bf.append("</tr>");
                    }
                } else if (type.equalsIgnoreCase("vulnsearch")) {
                    String key = request.getParameter("key");
                    LOG.log(Level.INFO, "Buscar vulnerabilidad: {0}", key);
                    List<CVE> foundList = dao.searchCVE(key);
                    for (CVE cve : foundList) {
                        if (!cve.getName().equalsIgnoreCase("Not found")) {
                            SimpleDateFormat formatter = new SimpleDateFormat("dd-MM-yyyy");
                            bf.append("<tr>");
                            bf.append("<td>").append(cve.getName()).append("</td>\n");
                            bf.append("<td>").append(formatter.format(cve.getPublished())).append("</td>\n");
                            bf.append("<td>").append(cve.getCVSS().getScore()).append("</td>\n");
                            bf.append("<td>").append(cve.getSeverity()).append("</td>\n");
                            bf.append("</tr>");
                            /*
                             bf.append("<td>\n");
                             bf.append("<a class='view' href='vulnerabilities/vulnDetail.jsp?tipo=2&name=").append(vuln.getName()).append("'><img src=\"../resources/images/search.png\" alt=\"magni\" id=\"tableicon\" /></a>");
                             bf.append("</td>\n");*/
                            bf.append("<tr>");
                            bf.append("<td>Descripción</td>");
                            bf.append("<td colspan='3'>").append(cve.getDescription()).append("</td>");
                            bf.append("</tr>");
                            bf.append("<tr>");
                            bf.append("<td>Software Vulnerable:</td>");
                            bf.append("<td colspan='3'>");
                            bf.append("<table style='border:none'>");
                            bf.append("<tr>").append("<td>Fabricante</td><td>Software</td><td colspan='2'>Versi&oacute;n(es)</td></tr>");
                            for (VulnSoftware sw : cve.getVuln_soft()) {
                                bf.append("<tr>");
                                bf.append("<td>").append(sw.getVendor().toUpperCase()).append("</td>");
                                bf.append("<td>").append(sw.getName().toUpperCase()).append("</td>");
                                bf.append("<td colspan='2'>").append(sw.getVersion().toString()).append("</td>");
                                bf.append("</tr>");
                            }
                            bf.append("</table>");
                            bf.append("</td>");
                            bf.append("</tr>");
                        } else {//if (cve.getName().equalsIgnoreCase("Not found")) {
                            //bf.append("<tr>\n");
                            //bf.append("<td colspan='4' style='text-align:center'>No se encontraron resultados para el criterio: \"").append(key).append("\"</td>\n");
                            //bf.append("</tr>\n");
                            bf.append("Not found");
                        }
                    }
                }
                response.getWriter().write(bf.toString());
            }
        }
    }

    /**
     * Método doPost
     *
     * @param req referencia de Solicitud
     * @param resp referencia de Respuesta
     * @throws ServletException
     * @throws IOException
     */
    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        doGet(req, resp);
    }

}
