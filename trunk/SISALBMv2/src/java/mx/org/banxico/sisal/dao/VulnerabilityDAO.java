package mx.org.banxico.sisal.dao;

import cve.entidades.CVE;
import cve.parser.CVEParser;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import mx.org.banxico.sisal.db.ConnectionFactory;

public class VulnerabilityDAO implements java.io.Serializable {

    private static final Logger LOG = Logger.getLogger(VulnerabilityDAO.class.getName());
    private static final long serialVersionUID = -1L;
    Connection connection;
    Statement stmt;
    private int noOfRRecords;
    private int noOfARecords;
    private List<CVE> listaCVE;
    private List<CVE> archivoCVE;
    private CVEParser mCVEParser;

    public VulnerabilityDAO() {
        prepararLista();
        prepararArchivo();
    }

    private static Connection getConnection() {
        Connection con = ConnectionFactory.getInstance().getConnection();
        return con;
    }

    public List<CVE> retrieveAllCVEs(int offset, int noOfRecords) {
        String query = "SELECT * FROM DB LIMIT " + offset + ", " + noOfRecords;
        List<CVE> cvelist = new ArrayList<>();
        CVE ncve = null;
        try {
            connection = getConnection();
            stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                ncve = new CVE(rs.getString("name"));
                ncve.setDescription(rs.getString("description"));
                //TODO: Agregar los restantes
                cvelist.add(ncve);
            }
            rs.close();
            rs = stmt.executeQuery("SELECT FOUND_ROWS()");
            if (rs.next()) {
                this.noOfRRecords = rs.getInt(1);
            }
        } catch (SQLException e) {
            LOG.log(Level.INFO, "Ocurrio una excepci\u00f3n SQL: {0}", e.getMessage());
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                LOG.log(Level.INFO, "Ocurrio una excepci\u00f3n SQL: {0}", e.getMessage());
            }
        }
        return cvelist;
    }

    public int getNoOfRRecords() {
        return noOfRRecords;
    }

    public int getNoOfARecords() {
        return noOfARecords;
    }

    public List<CVE> retrieveAllCVEsFromFile() {
        mCVEParser = new CVEParser();
        mCVEParser.setFiltro("");
        List<CVE> cveList = mCVEParser.getListCVE(getClass().getResourceAsStream("/resources/nvdcve-recent.xml"));
        if (cveList.isEmpty()) {
            return new ArrayList<>();
        }
        return cveList;
    }

    private void prepararLista() {
        mCVEParser = new CVEParser();
        mCVEParser.setFiltro("");
        listaCVE = mCVEParser.getListCVE(getClass().getResourceAsStream("/resources/nvdcve-recent.xml"));
        if (listaCVE.isEmpty()) {
            listaCVE = new ArrayList<>();
        }
        this.noOfRRecords = listaCVE.size();
    }

    public List<CVE> retrieveFromList(int offset, int noOfRecords) {
        LOG.log(Level.INFO, "Par\u00e1metros recibidos: {0} y {1}", new Object[]{offset, noOfRecords});
        List<CVE> temp = new ArrayList<>();
        CVE nCVE;
        for (int i = offset; i < offset + noOfRecords; i++) {
            if (i >= this.noOfRRecords) {
                break;
            }
            nCVE = listaCVE.get(i);
            LOG.log(Level.INFO, "Agregando: {0}", nCVE.getName());
            temp.add(nCVE);
        }
        return temp;
    }

    public List<CVE> retrieveFromArList(int offset, int noOfRecords) {
        LOG.log(Level.INFO, "Par\u00e1metros recibidos: {0} y {1}", new Object[]{offset, noOfRecords});
        List<CVE> temp = new ArrayList<>();
        CVE nCVE;
        for (int i = offset; i < offset + noOfRecords; i++) {
            if (i >= this.noOfARecords) {
                break;
            }
            nCVE = archivoCVE.get(i);
            LOG.log(Level.INFO, "Agregando: {0}", nCVE.getName());
            temp.add(nCVE);
        }
        return temp;
    }

    private void prepararArchivo() {
        mCVEParser = new CVEParser();
        mCVEParser.setFiltro("");
        archivoCVE = mCVEParser.getListCVE(getClass().getResourceAsStream("/resources/nvdcve-2014.xml"));
        if (archivoCVE.isEmpty()) {
            archivoCVE = new ArrayList<>();
        }
        this.noOfARecords = archivoCVE.size();
    }

    public String describirCVE(int type, String name) {
        CVE temp = null;
        StringBuilder sb = new StringBuilder();
        sb.append("<table border=\"1\">");
        sb.append("<thead>");
        sb.append("<tr>");
        sb.append("<td colspan=\"2\" class=\"vulnHeader\">").append(name).append("</td>");
        sb.append("</tr>");
        sb.append("</thead>");
        if (type == 1) {
            for (CVE cve : listaCVE) {
                if (cve.getName().toString().equals(name)) {
                    temp = cve;
                    LOG.log(Level.INFO, "Vulnerabilidad encontrada: {0}", cve.getName());
                    break;
                }
            }
        } else if (type == 2) {
            for (CVE cve : archivoCVE) {
                if (cve.getName().toString().equals(name)) {
                    temp = cve;
                    LOG.log(Level.INFO, "Vulnerabilidad encontrada: {0}", cve.getName());
                    break;
                }
            }
        }
        sb.append("<tbody>");
        DateFormat df = DateFormat.getDateInstance(DateFormat.LONG);
        sb.append("<tr>");
        sb.append("<td>").append("Fecha de Publicaci贸n:").append("</td>").append("<td>").append(df.format(temp.getPublished())).append("</td>");
        sb.append("</tr>");
        sb.append("<tr>");
        sb.append("<td>").append("Fecha de Modificaci贸n:").append("</td>").append("<td>").append(df.format(temp.getModified())).append("</td>");
        sb.append("</tr>");
        sb.append("<tr>");
        sb.append("<td>Descripci贸n:").append("</td>").append("<td>").append(temp.getDescription()).append("</td>");
        sb.append("</tr>");
        sb.append("<tr>");
        sb.append("<td>").append("Criticidad:").append("</td>").append("<td>").append(temp.getSeverity()).append("</td>");
        sb.append("</tr>");
        sb.append("<tr>");
        sb.append("<td>").append("CVSS:").append("</td>").append("<td>").append(temp.getCVSS().score).append("</td>");
        sb.append("</tr>");
        sb.append("<tr>");
        sb.append("<td>").append("Vector CVSS:").append("</td>").append("<td>").append(temp.getCVSS().vector).append("</td>");
        sb.append("</tr>");
        sb.append("<tr>");
        sb.append("<td>").append("Referencias:").append("</td>").append("<td>");
        if (temp.getReferences().size() > 0) {
            sb.append("<table style='border: none;'>");
            for (int i = 0; i < temp.getReferences().size(); i++) {
                sb.append("<tr>");
                sb.append("<td>").append(temp.getReferences().get(i).getSource()).append("</td>");
                sb.append("<td>").append(temp.getReferences().get(i).getUrl()).append("</td>");
                sb.append("</tr>");
            }
            sb.append("</table>");
        } else {
            sb.append("ND");
        }
        sb.append("</td>");
        sb.append("</tr>");
        sb.append("<tr>");
        sb.append("<td>").append("Software Vulnerable:").append("</td>");
        sb.append("<td>");
        if (temp.getVuln_soft().size() > 0) {
            sb.append("<table style='border: none;'>");
            sb.append("<thead>");
            sb.append("<tr>");
            sb.append("<td>").append("Proveedor").append("</td>");
            sb.append("<td>").append("Producto").append("</td>");
            sb.append("<td>").append("Versi贸n(es)").append("</td>");
            sb.append("</tr>");
            sb.append("</thead>");
            for (int i = 0; i < temp.getVuln_soft().size(); i++) {
                sb.append("<tr>");
                sb.append("<td>").append(temp.getVuln_soft().get(i).getVendor().toUpperCase()).append("</td>");
                sb.append("<td>").append(temp.getVuln_soft().get(i).getName()).append("</td>");
                sb.append("<td>").append(temp.getVuln_soft().get(i).getVersion().toString()).append("</td>");
                sb.append("</tr>");
            }
            sb.append("</table>");
        } else {
            sb.append("ND");
        }
        sb.append("</td>");
        sb.append("</tr>");
        sb.append("</tbody>");
        sb.append("</table>");
        return sb.toString();
    }

}
