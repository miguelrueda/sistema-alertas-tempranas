package mx.org.banxico.sisal.dao;

import cve.entidades.CVE;
import cve.entidades.CVEReference;
import cve.entidades.VulnSoftware;
import cve.parser.CVEParser;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.List;
import java.util.StringTokenizer;
import java.util.logging.Level;
import java.util.logging.Logger;
import mx.org.banxico.sisal.db.ConnectionFactory;

public class VulnerabilityDAO implements java.io.Serializable {

    private static final Logger LOG = Logger.getLogger(VulnerabilityDAO.class.getName());
    private static final long serialVersionUID = -1L;
    Connection connection;
    Statement stmt;
    private int noOfRRecords;
    private int noOfARecords;
    private List<CVE> listaCVE;
    private List<CVE> archivoCVE;
    private CVEParser mCVEParser;
    private List<String> nombres;

    public VulnerabilityDAO() {
        prepararLista();
        prepararArchivo();
        //TODO: Eliminar este método
        //iniciarNombres();
    }

    private static Connection getConnection() {
        Connection con = ConnectionFactory.getInstance().getConnection();
        if (con != null) {
            LOG.log(Level.INFO, "Conexi\u00f3n con BD Exitosa: {0}", con.toString());
        }
        return con;
    }

    public List<CVE> retrieveAllCVEs(int offset, int noOfRecords) {
        String query = "SELECT * FROM DB LIMIT " + offset + ", " + noOfRecords;
        List<CVE> cvelist = new ArrayList<CVE>();
        CVE ncve = null;
        try {
            connection = getConnection();
            stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            while (rs.next()) {
                ncve = new CVE(rs.getString("name"));
                ncve.setDescription(rs.getString("description"));
                //TODO: Agregar los restantes
                cvelist.add(ncve);
            }
            rs.close();
            rs = stmt.executeQuery("SELECT FOUND_ROWS()");
            if (rs.next()) {
                this.noOfRRecords = rs.getInt(1);
            }
        } catch (SQLException e) {
            LOG.log(Level.INFO, "Ocurrio una excepci\u00f3n SQL: {0}", e.getMessage());
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                LOG.log(Level.INFO, "Ocurrio una excepci\u00f3n SQL: {0}", e.getMessage());
            }
        }
        return cvelist;
    }

    public int getNoOfRRecords() {
        return noOfRRecords;
    }

    public int getNoOfARecords() {
        return noOfARecords;
    }

    public List<CVE> retrieveAllCVEsFromFile() {
        mCVEParser = new CVEParser();
        mCVEParser.setFiltro("");
        List<CVE> cveList = mCVEParser.getListCVE(getClass().getResourceAsStream("/resources/nvdcve-recent.xml"));
        if (cveList.isEmpty()) {
            return new ArrayList<CVE>();
        }
        return cveList;
    }

    private void prepararLista() {
        mCVEParser = new CVEParser();
        mCVEParser.setFiltro("");
        listaCVE = mCVEParser.getListCVE(getClass().getResourceAsStream("/resources/nvdcve-recent.xml"));
        if (listaCVE.isEmpty()) {
            listaCVE = new ArrayList<CVE>();
        }
        this.noOfRRecords = listaCVE.size();
    }

    public List<CVE> retrieveFromList(int offset, int noOfRecords) {
        LOG.log(Level.INFO, "Par\u00e1metros recibidos: {0} y {1}", new Object[]{offset, noOfRecords});
        List<CVE> temp = new ArrayList<CVE>();
        CVE nCVE;
        for (int i = offset; i < offset + noOfRecords; i++) {
            if (i >= this.noOfRRecords) {
                break;
            }
            nCVE = listaCVE.get(i);
            LOG.log(Level.INFO, "Agregando: {0}", nCVE.getName());
            temp.add(nCVE);
        }
        return temp;
    }

    public List<CVE> retrieveFromArList(int offset, int noOfRecords) {
        LOG.log(Level.INFO, "Par\u00e1metros recibidos: {0} y {1}", new Object[]{offset, noOfRecords});
        List<CVE> temp = new ArrayList<CVE>();
        CVE nCVE;
        for (int i = offset; i < offset + noOfRecords; i++) {
            if (i >= this.noOfARecords) {
                break;
            }
            nCVE = archivoCVE.get(i);
            LOG.log(Level.INFO, "Agregando: {0}", nCVE.getName());
            temp.add(nCVE);
        }
        return temp;
    }

    private void prepararArchivo() {
        mCVEParser = new CVEParser();
        mCVEParser.setFiltro("");
        archivoCVE = mCVEParser.getListCVE(getClass().getResourceAsStream("/resources/nvdcve-2014.xml"));
        if (archivoCVE.isEmpty()) {
            archivoCVE = new ArrayList<CVE>();
        }
        this.noOfARecords = archivoCVE.size();
    }

    public String describirCVE(int type, String name) {
        CVE temp = null;
        StringBuilder sb = new StringBuilder();
        sb.append("<table id=\"tableexport\" border=\"1\">");
        sb.append("<thead>");
        sb.append("<tr>");
        sb.append("<td colspan=\"2\" class=\"vulnHeader\">").append(name).append("</td>");
        sb.append("</tr>");
        sb.append("</thead>");
        if (type == 1) {
            for (CVE cve : listaCVE) {
                if (cve.getName().toString().equals(name)) {
                    temp = cve;
                    LOG.log(Level.INFO, "Vulnerabilidad encontrada: {0}", cve.getName());
                    break;
                }
            }
        } else if (type == 2) {
            for (CVE cve : archivoCVE) {
                if (cve.getName().toString().equals(name)) {
                    temp = cve;
                    LOG.log(Level.INFO, "Vulnerabilidad encontrada: {0}", cve.getName());
                    break;
                }
            }
        }
        sb.append("<tbody>");
        DateFormat df = DateFormat.getDateInstance(DateFormat.LONG);
        sb.append("<tr>");
        sb.append("<td>").append("Fecha de Publicación:").append("</td>").append("<td id=\"pubdate\">").append(df.format(temp.getPublished())).append("</td>");
        sb.append("</tr>");
        sb.append("<tr>");
        sb.append("<td>").append("Fecha de Modificación:").append("</td>").append("<td id=\"moddate\">").append(df.format(temp.getModified())).append("</td>");
        sb.append("</tr>");
        sb.append("<tr>");
        sb.append("<td>Descripción:").append("</td>").append("<td id=\"desc\">").append(temp.getDescription()).append("</td>");
        sb.append("</tr>");
        sb.append("<tr>");
        sb.append("<td>").append("Criticidad:").append("</td>").append("<td id=\"criticidad\">").append(temp.getSeverity()).append("</td>");
        sb.append("</tr>");
        sb.append("<tr>");
        sb.append("<td>").append("CVSS:").append("</td>").append("<td id=\"cvsscore\">").append(temp.getCVSS().score).append("</td>");
        sb.append("</tr>");
        sb.append("<tr>");
        sb.append("<td>").append("Vector CVSS:").append("</td>").append("<td>");
        if (!temp.getCVSS().vector.toString().equals("") && !temp.getCVSS().vector.equals("ND")) {
            sb.append(describirVector(temp.getCVSS().vector));
        } else {
            sb.append("<p id=\"cvssvector\">Vector No Disponible</p>");
        }
        sb.append("</td>");
        sb.append("</tr>");
        sb.append("<tr>");
        sb.append("<td>").append("Referencias:").append("</td>").append("<td id='refs'>");
        if (temp.getReferences().size() > 0) {
            sb.append("<table style='border: none;'>");
            for (int i = 0; i < temp.getReferences().size(); i++) {
                sb.append("<tr>");
                sb.append("<td>").append(temp.getReferences().get(i).getSource()).append("</td>");
                sb.append("<td>").append(temp.getReferences().get(i).getUrl()).append("</td>");
                sb.append("</tr>");
            }
            sb.append("</table>");
        } else {
            sb.append("ND");
        }
        sb.append("</td>");
        sb.append("</tr>");
        sb.append("<input id='hiddenRefs' type='hidden' value='").append(parseRefs(temp.getReferences())).append("' />");
        sb.append("<tr>");
        sb.append("<td>").append("Software Vulnerable:").append("</td>");
        sb.append("<td>");
        if (temp.getVuln_soft().size() > 0) {
            sb.append("<table style='border: none;'>");
            sb.append("<thead>");
            sb.append("<tr>");
            sb.append("<td>").append("Proveedor").append("</td>");
            sb.append("<td>").append("Producto").append("</td>");
            sb.append("<td>").append("Versión(es)").append("</td>");
            sb.append("</tr>");
            sb.append("</thead>");
            for (int i = 0; i < temp.getVuln_soft().size(); i++) {
                sb.append("<tr>");
                sb.append("<td>").append(temp.getVuln_soft().get(i).getVendor().toUpperCase()).append("</td>");
                sb.append("<td>").append(temp.getVuln_soft().get(i).getName()).append("</td>");
                sb.append("<td>").append(temp.getVuln_soft().get(i).getVersion().toString()).append("</td>");
                sb.append("</tr>");
            }
            sb.append("</table>");
        } else {
            sb.append("ND");
        }
        sb.append("</td>");
        sb.append("</tr>");
        sb.append("<input id='hiddenSW' type='hidden' value='");
        if (!(temp.getVuln_soft().isEmpty())) {
            sb.append(parseSW(temp.getVuln_soft()));
        } else {
            sb.append("Lista temporalmente vacía.");
        }
        sb.append("' />");
        //Botón de Descarga
        sb.append("<tr>");
        sb.append("<td>").append("Descargar").append("</td>");
        sb.append("<td>");
        sb.append("<button onclick=\"javascript:toPDF(");
        sb.append("\'").append(temp.getName()).append("\'");
        sb.append(")\">");
        sb.append("Versión PDF</button>");
        sb.append("</td>");
        sb.append("</tr>");
        sb.append("</tbody>");
        sb.append("</table>");
        return sb.toString();
    }

    //(AV:[L,A,N]/AC:[H,M,L]/Au:[N,S,M]/C:[N,P,C]/I:[N,P,C]/A:[N,P,C])
    private String describirVector(String vector) {
        StringTokenizer tokens = new StringTokenizer(vector, "(:/)");
        StringBuilder sb = new StringBuilder();
        int nDatos = tokens.countTokens();
        String[] vec = new String[nDatos];
        int i = 0;
        while (tokens.hasMoreTokens()) {
            vec[i] = tokens.nextToken().toString();
            i++;
        }
        vec[0] = "Vector de Acceso: ";
        if (vec[1].equalsIgnoreCase("L")) {
            vec[1] = "Acceso Local";
        } else if (vec[1].equalsIgnoreCase("A")) {
            vec[1] = "Red Adyacente";
        } else if (vec[1].equalsIgnoreCase("N")) {
            vec[1] = "Red";
        }
        vec[2] = "Complejidad de Acceso: ";
        if (vec[3].equalsIgnoreCase("H")) {
            vec[3] = "Alta";
        } else if (vec[3].equalsIgnoreCase("M")) {
            vec[3] = "Media";
        } else if (vec[3].equalsIgnoreCase("L")) {
            vec[3] = "Baja";
        }
        vec[4] = "Autenticación: ";
        if (vec[5].equalsIgnoreCase("N")) {
            vec[5] = "No requerida";
        } else if (vec[5].equalsIgnoreCase("S")) {
             vec[5] = "Requiere una instancia";
        } else if (vec[5].equalsIgnoreCase("M")) {
            vec[5] = "Requiere múltiples instancias";
        }
        vec[6] = "Impacto en Confidencialidad: ";
        if (vec[7].equalsIgnoreCase("N")) {
            vec[7] = "No tiene";
        } else if (vec[7].equalsIgnoreCase("P")) {
            vec[7] = "Parcial";
        } else if (vec[7].equalsIgnoreCase("C")) {
            vec[7] = "Completo";
        }
        vec[8] = "Impacto en integridad: ";
        //N = None, P = Partial, C = Complete
        if (vec[9].equalsIgnoreCase("N")) {
            vec[9] = "No tiene";
        } else if (vec[9].equalsIgnoreCase("P")) {
            vec[9] = "Parcial";
        } else if (vec[9].equalsIgnoreCase("C")) {
            vec[9] = "Completo";
        }
        vec[10] = "Impacto en Disponibilidad: ";
        // N = None, P = Partial, C = Complete
        if (vec[11].equalsIgnoreCase("N")) {
            vec[11] = "No tiene";
        } else if (vec[11].equalsIgnoreCase("P")) {
            vec[11] = "Parcial";
        } else if (vec[11].equalsIgnoreCase("C")) {
            vec[11] = "Completo";
        }
        sb.append("<table style='border: none;'>");
        sb.append("<tr>").append("<td colspan='2' id='cvssvector'>").append(vector).append("</td>").append("</tr>");
        for (int j = 0; j < vec.length; j++) {
            sb.append("<tr>");
            sb.append("<td>").append(vec[j]).append("</td>");
            j++;
            sb.append("<td>").append(vec[j]).append("</td>");
            sb.append("</tr>");
        }
        sb.append("</table>");
        return sb.toString();
    }

    private Object parseSW(List<VulnSoftware> vuln_soft) {
        StringBuilder sb = new StringBuilder();
        for (VulnSoftware sw : vuln_soft) {
            sb.append("Proveedor: ");
            sb.append(sw.getVendor().toUpperCase());
            sb.append(" \nProducto: ");
            sb.append(sw.getName());
            sb.append(" \nVersión(es): ");
            sb.append(sw.getVersion());
            sb.append("/");
        }
        return sb.toString();
    }

    private Object parseRefs(List<CVEReference> references) {
        StringBuilder sb = new StringBuilder();
        for (CVEReference ref : references) {
            sb.append("Source:\t\t");
            sb.append(ref.getSource());
            sb.append("\nURL:\t\t");
            sb.append(ref.getUrl());
            sb.append("¿");
        }
        return sb.toString();
    }

    private int testRows;

    public List<String> getNombres(int offset, int noOfRecords) {
        LOG.log(Level.INFO, "Par\u00e1metros recibidos: {0} y {1}", new Object[]{offset, noOfRecords});
        List<String> temp = new ArrayList<String>();
        String name = "";
        for (int i = offset; i < offset + noOfRecords; i++) {
            if (i >= this.testRows) {
                break;
            }
            name = nombres.get(i);
            LOG.log(Level.INFO, "Agregando: {0}", nombres.get(i));
            temp.add(name);
        }
        return temp;
    }

    public int getTestRows() {
        return testRows;
    }

    /**
     * TODO: Cambiar este método de prueba
     */
    private void iniciarNombres() {
        //Empieza desde offset y trae noOfRecords
        String query = "SELECT * FROM test"; // LIMIT " + offset + ", " + noOfRecords;
        LOG.log(Level.INFO, "Query: {0}", query);
        nombres = new ArrayList<String>();
        String name = "";
        try {
            connection = getConnection();
            stmt = connection.createStatement();
            ResultSet rs = stmt.executeQuery(query);
            int nr = 0;
            while (rs.next()) {
                name = rs.getString("valor");
                nombres.add(name);
                nr++;
            }
            rs.close();
            this.testRows = nr;
        } catch (SQLException e) {
            LOG.log(Level.INFO, "Error al obtener los nombres: {0}", e.getMessage());
        } finally {
            try {
                if (stmt != null) {
                    stmt.close();
                }
                if (connection != null) {
                    connection.close();
                }
            } catch (SQLException e) {
                LOG.log(Level.INFO, "Error al cerrar la conexi\u00f3n: {0}", e.getMessage());
            }
        }
    }

}
