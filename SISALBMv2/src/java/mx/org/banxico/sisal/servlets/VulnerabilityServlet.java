package mx.org.banxico.sisal.servlets;

import java.io.IOException;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.servlet.RequestDispatcher;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import mx.org.banxico.sisal.dao.SoftwareDAO;
import mx.org.banxico.sisal.dao.VulnerabilityDAO;
import mx.org.banxico.sisal.entities.Software;
import mx.org.banxico.sisal.parser.entidades.CVE;

public class VulnerabilityServlet extends HttpServlet implements java.io.Serializable {

    private static final long serialVersionUID = -1L;
    private static final Logger LOG = Logger.getLogger(VulnerabilityServlet.class.getName());

    public VulnerabilityServlet() {
        super();
    }

    @Override
    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {

        if (!request.getParameter("action").equals("")) {
            String action = (String) request.getParameter("action");
            LOG.log(Level.INFO, "Procesando petici\u00f3n de tipo: {0}", action);

            int page = 1;
            int recordsPerPage = 20;
            String nextJSP = "/admin/Index.html";
            RequestDispatcher view;
            VulnerabilityDAO dao = new VulnerabilityDAO();
            SoftwareDAO swdao = new SoftwareDAO();
            HttpSession sesion = request.getSession();
            sesion.setAttribute("vulndao", dao);
            sesion.setAttribute("swdao", swdao);

            if (action.equalsIgnoreCase("view")) {
                String tipo = (String) request.getParameter("tipo");
                int tipoI = Integer.parseInt(tipo);
                switch (tipoI) {
                    case 1:
                        if (request.getParameter("page") != null) {
                            LOG.log(Level.INFO, "El valor de page es: {0}", request.getParameter("page"));
                            page = Integer.parseInt(request.getParameter("page"));
                        }
                        //List<CVE> cveList = dao.retrieveAllCVEs((page - 1) * recordsPerPage, recordsPerPage);
                        //List<CVE> cveList = dao.retrieveAllCVEsFromFile();
                        LOG.log(Level.INFO, "Traeme registros del: {0} al: {1}", new Object[]{page - 1, recordsPerPage});
                        List<CVE> cveList = dao.retrieveFromList((page - 1) * recordsPerPage, recordsPerPage);
                        int noOfRecords = dao.getNoOfRRecords();
                        //int noOfPages = (int) Math.ceil(noOfRecords * 1.0 / recordsPerPage);
                        int noOfPages = (int) Math.ceil(noOfRecords * 1.0 / recordsPerPage);
                        request.setAttribute("cveList", cveList);
                        request.setAttribute("noOfPages", noOfPages);
                        request.setAttribute("currentPage", page);

                        LOG.log(Level.INFO, "Redireccionando al recurso: /vulnerabilities/recentVulns.jsp");
                        nextJSP = "/admin/vulnerabilities/recentVulns.jsp";
                        break;
                    case 2:
                        if (request.getParameter("page") != null) {
                            LOG.log(Level.INFO, "El valor de page es: {0}", request.getParameter("page"));
                            page = Integer.parseInt(request.getParameter("page"));
                        }
                        LOG.log(Level.INFO, "Traeme registros del: {0} al: {1}", new Object[]{page - 1, recordsPerPage});
                        List<CVE> arcveList = dao.retrieveFromArList((page - 1) * recordsPerPage, recordsPerPage);
                        int arnoOfRecords = dao.getNoOfARecords();
                        int arnoOfPages = (int) Math.ceil(arnoOfRecords * 1.0 / recordsPerPage);
                        request.setAttribute("arcveList", arcveList);
                        request.setAttribute("arnoOfPages", arnoOfPages);
                        request.setAttribute("currentPage", page);
                        LOG.log(Level.INFO, "Redireccionando al recurso: /vulnerabilities/vulnArchive.jsp");
                        nextJSP = "/admin/vulnerabilities/vulnArchive.jsp";
                        break;
                    case 3:
                        if (request.getParameter("page") != null) {
                            LOG.log(Level.INFO, "El valor de page es: {0}", request.getParameter("page"));
                            page = Integer.parseInt(request.getParameter("page"));
                        }
                        LOG.log(Level.INFO, "Traeme registros del: {0} al: {1}", new Object[]{page - 1, recordsPerPage});
                        List<Software> swList = swdao.retrieveFromList((page - 1) * recordsPerPage, recordsPerPage);
                        int swnoOfRecords = swdao.getNoOfRecords();
                        int swnoOfPages = (int) Math.ceil(swnoOfRecords * 1.0 / recordsPerPage);
                        request.setAttribute("swList", swList);
                        request.setAttribute("swnoOfPages", swnoOfPages);
                        request.setAttribute("currentPage", page);
                        LOG.log(Level.INFO, "Redireccionando al recurso: /vulnerabilities/supportedSW.jsp");
                        nextJSP = "/admin/vulnerabilities/supportedSW.jsp";
                        break;
                }
                view = getServletContext().getRequestDispatcher(nextJSP);
                view.forward(request, response);
            } else if (action.equalsIgnoreCase("edit")) {

            }
        }

    }

    @Override
    protected void doPost(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {
        doGet(req, resp);
    }

}
