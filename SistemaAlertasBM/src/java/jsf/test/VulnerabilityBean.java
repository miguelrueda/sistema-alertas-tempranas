package jsf.test;

import java.io.InputStream;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;
import org.primefaces.model.DefaultStreamedContent;
import org.primefaces.model.StreamedContent;

/**
 *
 * @author t41507
 * @version 26.05.2014
 */
@ManagedBean
@SessionScoped
public class VulnerabilityBean implements java.io.Serializable {

    private static final Logger LOG = Logger.getLogger(VulnerabilityBean.class.getName());

    private List<Vulnerability> vulns;
    private List<Vulnerability> filteredVulns;
    @ManagedProperty("#{vulnerabilityService}")
    private VulnerabilityService service;
    private Vulnerability selectedVuln;
    private static StreamedContent file;
    /**
     * TEST
     */
    private static final List<String> refsList;
    private static final List<String> affSwlist;

    static {
        refsList = new ArrayList<>();
        affSwlist = new ArrayList<>();
        for (int i = 0; i < 10; i++) {
            refsList.add("Referencia: " + (i + 1));
            affSwlist.add("SW afectado: " + (i + 1));
        }
        try {
            InputStream stream = VulnerabilityBean.class.getResourceAsStream("CVE20140001.pdf");
            //InputStream flujo = (FacesContext.getCurrentInstance().getExternalContext()).getResourceAsStream("");
            file = new DefaultStreamedContent(stream, "application/pdf", "cve0001.pdf");
        } catch (Exception e) {
            LOG.log(Level.SEVERE, "Error al obtener el flujo del archivo");
        }

    }

    public List<String> getRefsList() {
        return refsList;
    }

    public List<String> getAffSwlist() {
        return affSwlist;
    }

    @PostConstruct
    public void init() {
        vulns = service.createList(500);
    }

    public VulnerabilityBean() {
    }

    public List<Vulnerability> getVulns() {
        return vulns;
    }

    public void setService(VulnerabilityService service) {
        this.service = service;
    }

    public Vulnerability getSelectedVuln() {
        return selectedVuln;
    }

    public void setSelectedVuln(Vulnerability selectedVuln) {
        this.selectedVuln = selectedVuln;
    }

    public List<Vulnerability> getFilteredVulns() {
        return filteredVulns;
    }

    public void setFilteredVulns(List<Vulnerability> filteredVulns) {
        this.filteredVulns = filteredVulns;
    }

    public StreamedContent getFile() {
        //Procesar
        LOG.log(Level.INFO, "Generando reporte para la vulnerabilidad: " + selectedVuln.getName());
        return file;
    }

    public void setFile(StreamedContent file) {
        this.file = file;
    }

}
